# -*- mode: python; python-indent-offset: 4 -*-
''' Check to be sure both state files have right amount of feeds
    Other consistency checks:
    * feed url consistent
    * feed names consistent
'''
from config_objects import MainConfigInfo, StateConfigInfo

def chk_main_state(mainconfigfilename, stateconfigfilename):
    '''
    Open both the main and state config files
    from file names and check to see if feeds are consistent.
    If not consistent, throw an error and quit
    Suggest in error message to recreate state file config
    using class/routine StateConfigInfo.create
    and editing as needed
    '''
    
    
    mci = MainConfigInfo.read(mainconfigfilename)
    sci = StateConfigInfo.read(stateconfigfilename)

    f_mci = MainConfigInfo.check_feed_nums(mci)
    f_sci = StateConfigInfo.check_feed_nums(sci)

    if f_mci != f_sci:
        print ("Main and State Config file mismatch!")
        print ("Main file lists: ",f_mci)
        print ("State file lists: ", f_sci)
        print ("Consider using StateConfigInfo.create routine ...")
        print ("To fix the problem")
        syslog.syslog (syslog.LOG_ERR,
            'SALTSTRAUMEN: Main config and \
            state file feed number mismatch')
        # effectively returns error and quits
        # return 1
        raise Exception('Config and State File feed mismatch')
    

    else:
        f_mci == f_sci
        return f_mci

    return f_mci

def open_read_mconfig (mainconfigfile_name):
    '''Function to read main config file'''
    ''' And open state file based on info in main config file'''
    main_config = MainConfigInfo.readMainConfig(mainconfigfile_name)
    statefile_name = main_config['GENERAL']['statefile']
    state_config = readStateConfig(statefile_name)
    configs = {
        'main_config':main_config,
        'state_config':state_config,
    }

    return configs
    # End open_read_mconfig



def find_feeds (Main_config_info):
    '''Return a small structure with the feed URLs'''
    cf = Main_config_info
    numfeeds = MainConfigInfo.check_feed_nums(cf)
    feedURLs = [None] * numfeeds
    for i in range (0, numfeeds):
        feedURLs[i] = cf['FEEDS'][i]['URL']
    return feedURLs

def fetch_feed (URL):
    '''fetch a feed'''
    feed = feedparser.parse(URL)
    return feed

def enumerate_feed_items (feed):
    '''Describe how many entries are in a feed'''
    its = len (feed['entries'])
    return its

def sort_entries (a_feed):
    '''sort one feed'''
    sorted_entries = sorted(a_feed['entries'],
            reverse = True, key=attrgetter('published_parsed'))
    ''' Merge sorted entries back into feed

    '''
    a_feed['entries'] = sorted_entries

    return a_feed

def feedHandleFetchSort (numfeeds,mainconfigdata,reftime_unix):
    ''' this idea of rolling up these calls might not be good'''
    nf = numfeeds
    rft =reftime_unix

    feedURLs = [0]*nf
    full_fd_content = [0]*nf
    ent_fd  = [0]*nf
    entries_per_feed =  [0]*nf
    epf = entries_per_feed #?
    uet = [0,0]*nf # updated entry times
    queues = [0] * nf
    feedURLs = FetchFeeds.find_feeds(mainconfigdata)

    newrYess = [0]*nf
    for i in range (0,nf):
        full_fd_content[i]= FetchFeeds.fetch_feed(feedURLs[i])
        epf[i] = FetchFeeds.enumerate_feed_items(full_fd_content[i])
        ent_fd[i] = FetchFeeds.sort_entries(full_fd_content[i])

        sortedFeedDict = {
            'enumFeedItems': epf,
            'sortedEntries': ent_fd
        }

    return sortedFeedDict # return sorted feeds and their entries

