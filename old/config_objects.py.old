# -*- mode: python; python-indent-offset: 4 -*-
''' Main and State Config File objects and methods'''


# import os
# import sys
import copy
import toml
from SaxeBlueskyPython.ticktocktime import unix_time_now, iso_time_now
from SaxeBlueskyPython.ticktocktime import tuple_time2unix, tuple_time2iso
from configmethods import fetch_feed, enumerate_feed_items

class MainConfigInfo:
    '''open, close, create, update, export/import info Main config file'''

    def __init__(self,main_configfile_name='salt-main.toml'):
        self.file_name = main_configfile_name

        ''' Class to manage the main config file and info'''
    @staticmethod
    def create (file2create_filename):
        '''creates a new skeletal config file
        ** Needs more detail on what to write out **
        '''
        with open (file2create_filename,'w',encoding="utf-8") as cf:
            cf.write('[GENERAL]')
            cf.write('\n')

            cf.write('\n')
            cf.write('[[FEEDS]]')
            cf.write('\n')

            cf.write('\n')
            cf.write('[BSKY_ACCOUNT]')
            cf.write('\n')

            cf.write('\n')
            j = cf.close()
            return j

    @staticmethod
    def read (main_configfile_name):
        '''Reads the existing main config file and returns
                      The config info
        '''

        with open(main_configfile_name, 'r',encoding="utf-8") as mainconfigfile:
            toml_in = toml.load(mainconfigfile)
            config_data = copy.deepcopy(toml_in)
            mainconfigfile.close()
        return copy.deepcopy(config_data)

    @staticmethod
    def check_feed_nums (main_config_info):
        '''Read main config file and deduce number of feeds
        Main config file checking
        Takes the data structure read from the main config file
        as the argument
        '''

        j = len(main_config_info['FEEDS'])
        return j

    @staticmethod
    def write(dummypass):
        pass

class StateConfigInfo:
    ''' Class to manage the state file and info
    ** Needs more detail on what to write out **
    '''
    def  __init__(self,file2create_filename='salt-state.toml', n_feeds=1):
        pass

    @staticmethod
    def create (file2create_filename='salt-state.toml', n_feeds=1):
        '''creates a new skeletal state file
        with NFeeds number of feeds
        ** Needs more detail on what to write out **
        '''

        # a = state_config_genInfo
        # b = feed_metadata
        # c = bsky_post_metadata
        with open (file2create_filename,'w',encoding="utf-8") as cf:
            cf.write('[GENERAL]')
            cf.write('\n')
            # toml.dump(a,cf)
            cf.write('\n')
            for i in range (0,n_feeds):
                cf.write('[[FEEDS]]')
                cf.write('\n')
                # toml.dump(b,cf)
                cf.write('\n')
            # end for loop

            cf.write('[BSKY_INFO]')
            cf.write('\n')
            # toml.dump(c,cf)
            cf.write('\n')
            j= cf.close()
            return j

    @staticmethod
    def read(filename):
        ''' read state file '''
        with open (filename, 'r',encoding="utf-8") as stateconfigfile:
            statetoml_in = toml.load(stateconfigfile)

            stateconfigfile.close()
        return statetoml_in

    @staticmethod
    def write_info (stateoutfile_name, data2write):
        '''
        Write current state info out to file
        '''
        with open(stateoutfile_name, 'w',encoding="utf-8") as stateoutfile:
            toml.dump(data2write, stateoutfile)
            i=stateoutfile.close()
        return i

    @staticmethod
    def update_bsky_prev (info):
        '''
        takes  dict for the state file bsky info,
        updates previous last post date/times
        returns it.

        info variable is an instance of the full state file info
        '''

        info['BSKY_INFO']['previous_last_posted_unix'] \
            = info['BSKY_INFO'].get('last_posted_unix')
        info['BSKY_INFO']['previous_last_posted_iso'] \
            = info['BSKY_INFO']['last_posted_iso']

        return info

    @staticmethod
    def update_bsky_now (info):
        ''' updates post times for bsky
            info variable is an instance of the full state file info
        '''

        info['BSKY_INFO']['last_posted_unix'] = unix_time_now()
        info['BSKY_INFO']['last_posted_iso'] = iso_time_now()
        return info

    @staticmethod
    def check_feed_nums (info):
        '''
        Checks feed numbers in STATE file
        info variable is an instance of the full state file info
        '''
        j = len(info['FEEDS'])
        return j

    @staticmethod
    def update_feed_prev (info):
        ''' Update timestamps of the feed read

        info variable is an instance of the full state file info
        '''
        numfeeds =  StateConfigInfo.check_feed_nums (info)

        for i in range (0, numfeeds):
            info['FEEDS'][i]['feed_previous_last_read_unix'] \
                = info['FEEDS'][i]['feed_last_read_unix']
            info['FEEDS'][i]['feed_previous_last_read_iso'] \
                = info['FEEDS'][i]['feed_last_read_iso']
        # end loop

        return info

    @staticmethod
    def update_feed_now (info):
        ''' Update timestamps of the feed read
         info variable is an instance of the full state file info
        '''
        numfeeds =  StateConfigInfo.check_feed_nums (info)
        for i in range (0, numfeeds):
            info['FEEDS'][i]['feed_last_read_unix'] \
                = unix_time_now()
            info['FEEDS'][i]['feed_last_read_iso'] \
                = iso_time_now()
        return info

    @staticmethod
    def update_entry_times (sorted_feeds,state_info):
        ''' update info
        Takes a feeds that has been sorted. Takes state info
        returns updated state info
        '''
        si = state_info
        sf = sorted_feeds

        j = len(sf)
        newestEntry = [0]*j
        oldestEntry = [0]*j
        oeTime =  [0]*j
        neTime = [0]*j
        neTime_iso =  [0]*j
        neTime_unix = [0]*j
        oeTime_iso =  [0]*j
        oeTime_unix = [0]*j


        for i in range (0,j):
            fi = enumerate_feed_items(sf[i]) # number of feed entries

            newestEntry[i]  = sf[i]['entries'][0]
            oldestEntry[i]  = sf[i]['entries'][fi-1]

            neTime[i] = newestEntry[i]['published_parsed']
            oeTime[i] = oldestEntry[i]['published_parsed']

            neTime_iso[i] = tuple_time2iso (neTime[i])
            neTime_unix[i] = tuple_time2unix (neTime[i])
            oeTime_iso[i] = tuple_time2iso (oeTime[i])
            oeTime_unix[i] = tuple_time2unix (oeTime[i])

            si['FEEDS'][i]['newest_feed_item_unix'] = neTime_unix[i]
            si['FEEDS'][i]['newest_feed_item_iso'] = neTime_iso[i]
            si['FEEDS'][i]['oldest_feed_item_iso'] = oeTime_iso[i]
            si['FEEDS'][i]['oldest_feed_item_unix'] = oeTime_unix[i]


        return si
